version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: taskboard-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskboard-prod
    restart: always

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: taskboard-backend-prod
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskboard-prod
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  frontend:
    build:
      context: ../
      dockerfile: frontend/Dockerfile
    container_name: taskboard-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - taskboard-prod
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  taskboard-prod:
    driver: bridge

volumes:
  postgres_prod_data:
